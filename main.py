import requests

from config import *

import logging

import sqlite3

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup

TOKEN = API_TOKEN

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=TOKEN)


storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)



class Form(StatesGroup):
    book_name = State()

mainmenu = ReplyKeyboardMarkup(resize_keyboard=True)
mainmenu.add("üìï–ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É").add("üíé–ö–æ—Ä–∑–∏–Ω–∞")

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    connect = sqlite3.connect('tg_users.db')
    cursor = connect.cursor()
    cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(
           id INTEGER,
           fav_1 VARCHAR(800)
           
       )""")
    connect.commit()

    people_id = message.chat.id
    cursor.execute(f"SELECT id FROM login_id WHERE id = {people_id}")
    data = cursor.fetchone()

    if data is None:
        user_id = [message.chat.id]
        cursor.execute("INSERT INTO login_id (id) VALUES (?);", user_id)
        connect.commit()
    else:
        pass

    await message.reply("–ü—Ä–∏–≤–µ—Ç!ü§ó \n\n–Ø -  –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ë–æ—Ç–∏–∫!üìö \n\n–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ—è–≤–∏–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏!", reply_markup=mainmenu)





@dp.message_handler(text='üìï–ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É')
async def find_information(message: types.Message):
     await Form.book_name.set()
     await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏. –í–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã.")



@dp.message_handler(state='*', commands=['cancel'])
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return


    await state.finish()
    await message.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.')



@dp.message_handler(state=Form.book_name)
async def process_name(message: types.Message, state: FSMContext):

    await state.finish()


    url = "https://www.googleapis.com/books/v1/volumes"



    params = {"q": message.text, "maxResults": 1}
    response = requests.get(url, params=params).json()

    for book in response.get('items', []):

        volume = book["volumeInfo"]
        title = volume["title"]


        author = volume.get("authors", ["–∞–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"])

        published = volume.get("publishedDate", "–≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        description = volume.get("description", "–æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        url_price = f"https://www.googleapis.com/books/v1/volumes?q={message.text}"
        response_price = requests.get(url_price)
        data_price = response_price.json()

        if data_price["totalItems"] == 0:
            return "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        buy_link = data_price["items"][0]["saleInfo"].get("buyLink")
        price_get = data_price["items"][0]["saleInfo"].get("listPrice")

        if buy_link:
            print("Success")
            if price_get:
                print("Success x2")
            else:
                pass
        else:
            pass

        if price_get:
            amount = int(price_get['amount'])
            finalansw = [
                f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* *{title}* \n\n*–ì–æ–¥ –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞:* _{published}_ \n\n*–ê–≤—Ç–æ—Ä*: _{author[0]}_\n\n*–¶–µ–Ω–∞*: _{amount} —Ä—É–±–ª–µ–π_ \n\n*–û–ø–∏—Å–∞–Ω–∏–µ*: _{description}_\n\n*–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É*: *{buy_link}*"]
        else:
            amount = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            finalansw = [
                f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* *{title}* \n\n*–ì–æ–¥ –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞:* _{published}_ \n\n*–ê–≤—Ç–æ—Ä*: _{author[0]}_\n\n*–¶–µ–Ω–∞*: _{amount}_ \n\n*–û–ø–∏—Å–∞–Ω–∏–µ*: _{description}_\n\n*–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É*: *{buy_link}*"]

        string = ''
        chars_to_remove = ['[', ']', "'"]

        for i in finalansw:
            string += str(i)
            string += ' '

        for char in chars_to_remove:
            string = string.replace(char, '')
        await message.answer(string, parse_mode="Markdown")

# @dp.message_handler(commands=['buy'])
# async def send_welcome(message: types.Message):
#     global cursor, connect
#
#     people_id = message.chat.id
#     cursor.execute(f"SELECT fav_1 FROM login_id WHERE id = {people_id}")
#     data = cursor.fetchone()
#
#     if data is None:
#         user_id = [message.chat.id]
#         cursor.execute("INSERT INTO login_id (id) VALUES (?);", user_id)
#         connect.commit()
#     else:
#         pass
#
#
#
#     await message.answer("–ö–Ω–∏–≥–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ (_—Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ Google Books_): zzz", parse_mode="Markdown")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

